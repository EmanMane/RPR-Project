package ba.unsa.etf.rpr.business;

import ba.unsa.etf.rpr.dao.HabitatDaoSQLImpl;
import ba.unsa.etf.rpr.dao.DaoFactory;
import ba.unsa.etf.rpr.domain.Habitat;
import ba.unsa.etf.rpr.exceptions.AnimalException;
import org.apache.commons.lang3.RandomStringUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import static org.mockito.Mockito.when;


/**
 * @author Eman AlibaliÄ‡
 *
 */
class HabitatManagerTest {

    private HabitatManager habitatManager;
    private Habitat habitat;
    private HabitatDaoSQLImpl habitatDaoSQLMock;
    private List<Habitat> habitats;

    /**
     * This method will be called before each test method
     */
    @BeforeEach
    public void initializeObjectsWeNeed() {
        habitatManager = Mockito.mock(HabitatManager.class);
        habitat = new Habitat();
        habitat.setName("Habitat1");
        habitat.setId(50);

        habitatDaoSQLMock = Mockito.mock(HabitatDaoSQLImpl.class);
        habitats = new ArrayList<>();
        habitats.addAll(Arrays.asList(new Habitat("Habitat1"), new Habitat("Habitat2"), new Habitat("Habitat3"), new Habitat("Habitat4")));
    }

    /**
     * In this method we will test validateHabitatName(String name) for correct and incorrect passed parameters
     */
    @Test
    void validateHabitatName() throws AnimalException {
        String correctName = "Habitat2";
        try {
            Mockito.doCallRealMethod().when(habitatManager).validateHabitatName(correctName);
        } catch (AnimalException e) {
            //Test will fall if method validateHabitatName(name) throws an exception for correct parameter
            e.printStackTrace();
            Assertions.assertTrue(false);
        }

        String incorrectNameShort = "A";
        Mockito.doCallRealMethod().when(habitatManager).validateHabitatName(incorrectNameShort);
        AnimalException animalException1 = Assertions.assertThrows(AnimalException.class, () -> {
            habitatManager.validateHabitatName(incorrectNameShort);}, "Habitat name must be between 3 and 45 chars");
        Assertions.assertEquals("Habitat name must be between 3 and 45 chars", animalException1.getMessage());

        String incorrectNameLong = RandomStringUtils.randomAlphabetic(50);
        Mockito.doCallRealMethod().when(habitatManager).validateHabitatName(incorrectNameLong);
        AnimalException animalException2 = Assertions.assertThrows(AnimalException.class, () -> {
            habitatManager.validateHabitatName(incorrectNameLong);}, "Habitat name must be between 3 and 45 chars");
        Assertions.assertEquals("Habitat name must be between 3 and 45 chars", animalException2.getMessage());
    }


    /**
     * Adding habitat that already exists
     * @throws AnimalException
     */
    @Test
    void add() throws AnimalException {
        MockedStatic<DaoFactory> daoFactoryMockedStatic = Mockito.mockStatic(DaoFactory.class);
        daoFactoryMockedStatic.when(DaoFactory::habitatDao).thenReturn(habitatDaoSQLMock);
        /*
        An exception will be thrown because our instance of Habitat.java class has value for id
         */
        when(DaoFactory.habitatDao().getAll()).thenReturn(habitats);
        Mockito.doCallRealMethod().when(habitatManager).add(habitat);
        AnimalException animalException = Assertions.assertThrows(AnimalException.class, () -> {
            habitatManager.add(habitat);}, "Can't add habitat with ID. ID is autogenerated");

        Assertions.assertEquals("Can't add habitat with ID. ID is autogenerated", animalException.getMessage());
        daoFactoryMockedStatic.verify(DaoFactory::habitatDao);
        Mockito.verify(habitatManager).add(habitat);
        daoFactoryMockedStatic.close();
    }

    /**
     * Adding a new habitat
     * @throws AnimalException
     */
    @Test
    void addNewHabitat() throws AnimalException {
        Habitat newHabitat = new Habitat("New Habitat");
        habitatManager.add(newHabitat);

        Assertions.assertTrue(true);
        Mockito.verify(habitatManager).add(newHabitat);
    }

}